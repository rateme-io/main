/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './../../pages/__root';

// Create Virtual Routes

const RatingSystemsLazyImport = createFileRoute('/rating-systems')();
const CollectionsLazyImport = createFileRoute('/collections')();
const IndexLazyImport = createFileRoute('/')();

// Create/Update Routes

const RatingSystemsLazyRoute = RatingSystemsLazyImport.update({
  id: '/rating-systems',
  path: '/rating-systems',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../pages/rating-systems.lazy').then((d) => d.Route),
);

const CollectionsLazyRoute = CollectionsLazyImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../pages/collections.lazy').then((d) => d.Route),
);

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../../pages/index.lazy').then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/collections': {
      id: '/collections';
      path: '/collections';
      fullPath: '/collections';
      preLoaderRoute: typeof CollectionsLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/rating-systems': {
      id: '/rating-systems';
      path: '/rating-systems';
      fullPath: '/rating-systems';
      preLoaderRoute: typeof RatingSystemsLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/collections': typeof CollectionsLazyRoute;
  '/rating-systems': typeof RatingSystemsLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/collections': typeof CollectionsLazyRoute;
  '/rating-systems': typeof RatingSystemsLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/collections': typeof CollectionsLazyRoute;
  '/rating-systems': typeof RatingSystemsLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/collections' | '/rating-systems';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/collections' | '/rating-systems';
  id: '__root__' | '/' | '/collections' | '/rating-systems';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  CollectionsLazyRoute: typeof CollectionsLazyRoute;
  RatingSystemsLazyRoute: typeof RatingSystemsLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CollectionsLazyRoute: CollectionsLazyRoute,
  RatingSystemsLazyRoute: RatingSystemsLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/collections",
        "/rating-systems"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/collections": {
      "filePath": "collections.lazy.tsx"
    },
    "/rating-systems": {
      "filePath": "rating-systems.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
